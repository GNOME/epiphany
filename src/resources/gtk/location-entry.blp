using Gtk 4.0;
using Gio 2.0;

template $EphyLocationEntry: Box {
  orientation: horizontal;

  Stack stack {
    transition-type: crossfade;

    StackPage {
      name: "display";

      child: Overlay overlay {
        Box {
          styles [
            "linked",
          ]

          [start]
          $EphySiteMenuButton site_menu_button {
            focus-on-click: false;
            valign: center;
            styles [
              "entry-icon",
              "start",
            ]
          }

          Button url_button {
            child: Label url_button_label {
              ellipsize: end;
            };

            clicked => $on_url_button_clicked();
            hexpand: true;

            styles [
              "entry-icon",
              "text-button",
            ]
          }

          [end]
          Button reader_mode_button {
            tooltip-text: _("Reader Mode");
            focus-on-click: false;
            visible: false;
            clicked => $on_reader_mode_clicked() swapped;

            styles [
              "entry-icon",
            ]
          }

          [end]
          $EphyAddOpensearchEngineButton opensearch_button {
            valign: center;
            focus-on-click: false;
            visible: false;

            styles [
              "entry-icon",
              "end",
            ]
          }

          [end]
          Button combined_stop_reload_button {
            action-name: "toolbar.combined-stop-reload";
            icon-name: "view-refresh-symbolic";

            styles [ "entry-icon" ]

            GestureClick {
              button: 2;
              pressed => $middle_click_pressed_cb();
              released => $middle_click_released_cb();
            }
          }
        }

        [overlay]
        ProgressBar progress_bar {
          valign: end;

          styles [
            "osd",
            "progress-indicator",
          ]
        }
      };
    }

    StackPage {
      name: "edit";

      child: Entry text {
        placeholder-text: _("Search for websites, bookmarks, and open tabs");
        input-hints: no_emoji;
        hexpand: true;
        extra-menu: context_menu_model;
        activate => $on_activate() swapped;
        changed => $on_editable_changed() swapped;
        icon-press => $on_icon_press();

        Popover suggestions_popover {
          has-arrow: false;
          autohide: false;
          can-focus: false;
          margin-bottom: 2;
          margin-top: 2;
          notify::visible => $on_suggestions_popover_notify_visible() swapped;

          child: ScrolledWindow scrolled_window {
            hscrollbar-policy: never;
            max-content-height: 400;
            propagate-natural-height: true;

            child: ListView suggestions_view {
              activate => $on_suggestion_activated() swapped;

              model: SingleSelection suggestions_model {
                autoselect: false;
                can-unselect: true;
                items-changed => $update_suggestions_popover() swapped;
              };

              factory: BuilderListItemFactory {
                template ListItem {
                  child: Grid {
                    column-spacing: 6;
                    row-spacing: 3;

                    GestureClick {
                      button: 1;
                      exclusive: true;
                      pressed => $on_item_pressed();
                      released => $on_item_released();
                    }

                    Image {
                      pixel-size: 16;
                      gicon: bind ($get_suggestion_icon(template.item as <$EphySuggestion>.icon)) as <Gio.Icon>;

                      layout {
                        column: "0";
                        row: "0";
                      }
                    }

                    Label {
                      use-markup: true;
                      ellipsize: end;
                      xalign: 0;
                      single-line-mode: true;
                      hexpand: true;
                      label: bind template.item as <$EphySuggestion>.title;

                      layout {
                        column: "1";
                        row: "0";
                      }
                    }

                    Label {
                      use-markup: true;
                      ellipsize: end;
                      xalign: 0;
                      single-line-mode: true;
                      hexpand: true;
                      label: bind template.item as <$EphySuggestion>.subtitle;

                      layout {
                        column: "1";
                        row: "1";
                      }

                      styles [
                        "dim-label",
                        "caption",
                      ]
                    }

                    Image {
                      pixel-size: 16;
                      gicon: bind ($get_suggestion_icon(template.item as <$EphySuggestion>.secondary-icon)) as <Gio.Icon>;

                      layout {
                        column: "2";
                        row: "0";
                      }
                    }
                  };
                }
              };
            };
          };

          styles [
            "menu",
            "suggestions",
          ]
        }

        EventControllerKey {
          key-pressed => $on_key_pressed() swapped;
        }

        EventControllerFocus {
          enter => $on_focus_enter();
          leave => $on_focus_leave();
        }

        GestureClick {
          button: 0;
          exclusive: true;
          propagation-phase: capture;
          pressed => $on_entry_pressed() swapped;
        }

        PopoverMenu context_menu {
          menu-model: context_menu_model;
          halign: start;
          has-arrow: false;
        }
      };
    }
  }
}

menu context_menu_model {
  section {
    item {
      label: _("_Undo");
      action: "edit.undo-extra";
    }

    item {
      label: _("_Redo");
      action: "edit.redo-extra";
    }
  }

  section {
    item {
      label: _("Cu_t");
      action: "clipboard.cut";
    }

    item {
      label: _("_Copy");
      action: "clipboard.copy";
    }

    item {
      label: _("_Paste");
      action: "clipboard.paste";
    }

    item {
      label: _("Paste and _Go");
      action: "clipboard.paste-and-go";
    }

    item {
      label: _("_Delete");
      action: "selection.delete";
    }
  }

  section {
    item {
      label: _("Cl_ear");
      action: "edit.clear";
    }

    item {
      label: _("Select _All");
      action: "entry.select-all";
    }
  }
}