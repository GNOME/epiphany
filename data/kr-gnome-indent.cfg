#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
#  K&R (sort-of), modified to better match "GNOME style"
#

indent_with_tabs		= 0		# 1=indent to level only, 2=indent with tabs
#input_tab_size			= 2		# original tab size
output_tab_size			= 2		# new tab size
indent_columns			= output_tab_size
indent_label			= 2		# pos: absolute col, neg: relative column
# indent_align_string		= False		# align broken strings
# indent_brace			= 0
indent_ternary_operator		= 2

nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
# nl_func_var_def_blk		= 1
# nl_before_case			= 1
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE
nl_brace_while			= remove
nl_brace_else			= remove
nl_squeeze_ifdef		= TRUE

# mod_paren_on_return		= add		# "return 1;" vs "return (1);"
# mod_full_brace_if		= add		# "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for		= add		# "for () a--;" vs "for () { a--; }"
# mod_full_brace_do		= add		# "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while		= add		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= force         # "return (1);" vs "return(1);"
sp_sizeof_paren			= force         # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc
# sp_type_func			= ignore
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_after_comma			= force

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
# align_var_def_inline		= TRUE
# align_var_def_star		= TRUE
# align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
align_var_struct_span		= 99
align_var_struct_gap		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_left		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3

# cmt_star_cont			= TRUE

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE

# Modified or added from original
sp_func_def_paren		= force 	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= force         # "foo (" vs "foo("
sp_func_proto_paren		= force         # "int foo ();" vs "int foo();"
sp_before_ptr_star              = add
sp_after_ptr_star               = remove
indent_switch_case              = indent_columns

align_func_params		= true
align_single_line_func		= true
align_var_def_star_style	= 2
#cmt_cpp_nl_end			= true		# wanted?
cmt_cpp_group			= true
cmt_cpp_to_c			= true		# "/* */" vs. "//"
#cmt_star_cont			= true		# wanted?
newlines			= lf
sp_after_ptr_star_qualifier	= force		# "const char * const" vs. "const char *const"
sp_between_ptr_star		= remove
sp_brace_else			= add
sp_func_call_user_paren		= remove	# For gettext, "_()" vs. "_ ()"
utf8_bom			= remove
utf8_force			= true

set func_call_user _ N_ C_
